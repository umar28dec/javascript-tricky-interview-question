const person1 = {
    firstName: "Ginny",
    getName: function() {
      return this.firstName;
    }
  }
  
  const person2 = {
    firstName: "Jhonny",
    getName: () => {
      return this.firstName;
    }
  }
  
  const getName1 = person1.getName;
  const getName2 = person2.getName;

  console.log(person1.getName(), getName1(), person2.getName(), getName2());



var number1 = 10;

var display = function () {
  console.log(number1);
  var number = 20;
};

display();

var output = (function(x) {
    delete x;
    return x;
  })(0);
  
  console.log(output);


  let numbers = [22, 33, 44, 55, 66];
numbers.pop();
console.log(numbers.length);
delete numbers[0];
console.log(numbers);





(function() {
    console.log(1); 
    setTimeout(function(){console.log(2)}, 1000); 
    setTimeout(function(){console.log(3)}, 0); 
    console.log(4);
})();

// 1
// 4
// 3
// 2



for (var i = 0; i < 5; i++) {
  setTimeout(function() { console.log(i); }, i * 1000 );
}

// 5





async function getdata(){
    var a = readstream();
    let result =[];
    a.on('data',(data)=>{
      result.push(data);
    })
    return new Promise((resolve, reject)=>{
    a.on('end',()=>{
        
            resolve(result);
        })
    })
    }
    async function other(){
    var b = await getdata()
    
    }
    


    var a = "{[()]}(}";
const b = a.split('');
const tem =[]
b.forEach((value, index, arr)=>{
    
})
console.log(b.length)

    


    Mangal Kumar Pandey to Everyone (3:21 PM)
function testMe(){ 
  x = 33; 
  console.log(x);
  var x; 
} 

testMe();
function testMe(){ 
  x = 33; 
  console.log(x);
  let x; 
} 

testMe();
function test(){
  for(var i= 0; i<3; i++){
    setTimeout(()=> {
      console.log(i);
    },0)
 }
}
test();
Mangal Kumar Pandey to Everyone (3:24 PM)
function test(){
  for(let i= 0; i<3; i++){
    setTimeout(()=> {
      console.log(i);
    },0)
 }
}
test();




abc();

function abc(){

console.log('abc');

}




def();

const def = ()=>{

console.log('def');

}



 


const a = {

         xyz : 'abc'

};

const b = a;

b.xyz = '123';

console.log(a.xyz,b.xyz);



 


var a = 5;

function xyz(){

 var a = 6; 

 console.log(a);

}

xyz();

console.log(a);



 


const a = Promise.resolve(5);

const b = Promise.reject(3);

const c = Promise.resolve(8);





Given a string, reverse each word in the sentence
For example "Welcome to Javascript!" should be become "emocleW ot !tpircsavaJ"

------------------------------------------------------



Q: What will be the output of the following code? 
for (var i = 0; i < 4; i++) {
 // (function (i) { //IIFE - Immediately invoked
    setTimeout(() => console.log(i), 0)
 // })(i)
}

----------------------------------------------------


  const first = () => console.log('first')
  const second = () => console.log('second')
  const third = () => console.log('third')
  const fourth = () => console.log('fourth')
  
  setImmediate(first)
  second()
  setTimeout(third, 0)
  process.nextTick(fourth)
  
  
  Second
  fourth
  first
  third
  
  
//Order:

----------------------------------------------------

Q. Rewrite promise-based application to Async/Await
function asyncTask() {
    let result =[];
    try{
      result['a'] = await functionB(valueA);
      result['b'] = await functionC(valueB);
      result['c'] = await functionD(valueC);
      return result;
    }catch (err){
      logger.error(err))
    }
}





Q: What will be the output of the following code? 

var globalVar = "abc";
(function outerFunction (outerArg) {
  var outerFuncVar = 'x';    
  (function innerFunction (innerArg) { 
    var innerFuncVar = "y";
    console.log(         
      "outerArg = " + outerArg + "\n" +         //
      "outerFuncVar = " + outerFuncVar + "\n" + //
      "innerArg = " + innerArg + "\n" +         //
      "innerFuncVar = " + innerFuncVar + "\n" + //
      "globalVar = " + globalVar);              //
  })(5); 
})(7); 

-----------------------------------------------------

Q: What will be the output of the following code? 
function test() {
   console.log(a);
   console.log(foo());
   
   var a = 1;
   function foo() {
      return 2;
   }
}
test();

----------------------------------------------------

Q: What will be the output of the following code? 
var fullname = 'Vikas Kumar';
var obj = {
   fullname: 'Ajay Singh',
   prop: {
      fullname: 'Vikram Patel',
      getFullname: function() {
         return this.fullname;
      }
   }
};
console.log(obj.prop.getFullname());
var test = obj.prop.getFullname;
console.log(test());

------------------------------------------------------


Given a string, reverse each word in the sentence
For example "Welcome to Javascript!" should be become "emocleW ot !tpircsavaJ"

------------------------------------------------------



Q: What will be the output of the following code? 
for (var i = 0; i < 4; i++) {
 // (function (i) { //IIFE - Immediately invoked
    setTimeout(() => console.log(i), 0)
 // })(i)
}

----------------------------------------------------


  const first = () => console.log('first')
  const second = () => console.log('second')
  const third = () => console.log('third')
  const fourth = () => console.log('fourth')
  
  setImmediate(first)
  second()
  setTimeout(third, 0)
  process.nextTick(fourth)
  
  
  Second
  fourth
  first
  third
  
  
//Order:

----------------------------------------------------

Q. Rewrite promise-based application to Async/Await
function asyncTask() {
    let result =[];
    try{
      result['a'] = await functionB(valueA);
      result['b'] = await functionC(valueB);
      result['c'] = await functionD(valueC);
      return result;
    }catch (err){
      logger.error(err))
    }
}

[11:04 am] Kumar, Nikhil
    console.log(typeof typeof 2);
console.log(typeof null);
[11:05 am] Kumar, Nikhil
    console.log(2 || 1 )

console.log(2 && 1)
[11:07 am] Kumar, Nikhil
    var a = [1,2,3,4]
[11:08 am] Kumar, Nikhil
    var a = [1,2,3,4,1,2]
[11:09 am] Kumar, Nikhil
     for( var i = 0; i < 5; i++){
     setTimeout(()=>console.log(i),1000);

}[11:11 am] Kumar, Nikhil
    
let i;
  for( i = 0; i < 5; i++){

      setTimeout(()=>console.log(i),1000);


}



[11:12 am] Kumar, Nikhil
    new Promise((resolve, reject) => {      resolve(2);
  
  })
  .then((a) => {    console.log(a);
   return a*2;
  })
  .catch((err) => {    console.error(err);
  })
  .finally((a) => {    console.log(a);
  }).then((a) => {    console.log(a);
  })



